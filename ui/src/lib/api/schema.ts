/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/auth/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Index */
		get: operations['index_auth__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Login */
		post: operations['login_auth_login_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth/create_user': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create User */
		post: operations['create_user_auth_create_user_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth/has_permission': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Has Permission */
		get: operations['has_permission_auth_has_permission_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/containers/all': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get All Containers
		 * @description Gets all containers on the current client.
		 *     :param token: The token to authenticate the user.
		 *     :return:
		 */
		get: operations['get_all_containers_containers_all_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/containers/get': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Container
		 * @description Gets a container by its id.
		 *     :param container_id: Container name or id.
		 *     :param token: The token to authenticate the user.
		 *     :return:
		 */
		get: operations['get_container_containers_get_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/creation': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Creation
		 * @description Gets the saved creation data from the database.
		 *     :param token: The token of the user.
		 *     :return: The app configuration.
		 */
		get: operations['get_creation_apps_create_creation_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/setup_git': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Test Connection
		 * @description Test connection to the git repository.
		 */
		post: operations['test_connection_apps_create_setup_git_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/name_available': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Name Available
		 * @description Check if the name is available.
		 *     :param token:
		 *     :param name: Name to check.
		 *     :return: True if the name is available, False otherwise.
		 */
		post: operations['name_available_apps_create_name_available_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/setup/claim_port': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Setup Claim Port
		 * @description Claim a port for the app in setup.
		 *     :param udp: if the port is udp
		 *     :param tcp: if the port is tcp
		 *     :param container_port: the port in the container
		 *     :param host_port: the port on the host
		 *     :param token: The token of the user
		 *     :return: True if the port is available and claimed, False otherwise
		 */
		post: operations['setup_claim_port_apps_create_setup_claim_port_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/delete_port': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete Port
		 * @description Delete a port from the app.
		 *     :param token: The token of the user
		 *     :param host_port: The port to delete
		 *     :return: True if the port is deleted, False otherwise
		 */
		delete: operations['delete_port_apps_create_delete_port_delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/create/setup_service': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Setup Service
		 * @description Setup a service for the app.
		 *     :param token: The token of the user
		 *     :param container_name: The name of the container
		 *     :param container_image: The image of the container
		 *     :return: True if the service is setup, False otherwise
		 */
		get: operations['setup_service_apps_create_setup_service_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Apps
		 * @description Get all apps from docker.
		 *     :return: list of apps
		 */
		get: operations['get_apps_apps__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/{app_name}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get App
		 * @description Get an app by name.
		 *     :param token: Token for authentication.
		 *     :param app_name: Name of the app.
		 *     :return: App object.
		 */
		get: operations['get_app_apps__app_name__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/apps/{app_name}/volumes': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Volumes
		 * @description Get the volumes used by the app.
		 *     :param token: Token for authentication.
		 *     :param app_name: Name of the app.
		 *     :return: List of volumes used by the app.
		 */
		get: operations['get_volumes_apps__app_name__volumes_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/ping': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Ping */
		get: operations['ping_ping_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** App */
		App: {
			/** Name */
			name: string;
		};
		/** AppOverview */
		AppOverview: {
			/** Name */
			name: string;
			status: components['schemas']['AppStatus'];
			usage?: components['schemas']['AppUsage'] | null;
		};
		/**
		 * AppStatus
		 * @enum {string}
		 */
		AppStatus: 'running' | 'stopped' | 'degraded' | 'unknown';
		/** AppUsage */
		AppUsage: {
			/**
			 * Cpu Usage
			 * @default 0
			 */
			cpu_usage: number;
			/**
			 * Memory Usage
			 * @default 0
			 */
			memory_usage: number;
			/**
			 * Containers Running
			 * @default 0
			 */
			containers_running: number;
			/** Ports Exposed */
			ports_exposed: components['schemas']['Port'][];
			/**
			 * Volumes Count
			 * @default 0
			 */
			volumes_count: number;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components['schemas']['ValidationError'][];
		};
		/** Port */
		Port: {
			/** Public Port */
			public_port: number;
			/** Container Port */
			container_port?: number | null;
			/**
			 * Tcp
			 * @default true
			 */
			tcp: boolean;
			/**
			 * Udp
			 * @default false
			 */
			udp: boolean;
			/**
			 * Ingress
			 * @default false
			 */
			ingress: boolean;
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
		/** Volume */
		Volume: {
			/** Name */
			name: string;
			/** Mountpoint */
			mountpoint: string;
			/**
			 * Created At
			 * Format: date-time
			 */
			created_at: string;
			/** Driver */
			driver: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	index_auth__get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	login_auth_login_post: {
		parameters: {
			query: {
				username: string;
				password: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_user_auth_create_user_post: {
		parameters: {
			query: {
				username: string;
				password: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	has_permission_auth_has_permission_get: {
		parameters: {
			query: {
				token: string;
				scope: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_all_containers_containers_all_get: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_container_containers_get_get: {
		parameters: {
			query: {
				container_id: string;
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_creation_apps_create_creation_get: {
		parameters: {
			query: {
				token: unknown;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	test_connection_apps_create_setup_git_post: {
		parameters: {
			query: {
				token: string;
				name: unknown;
				git_url: string;
				git_folder?: unknown;
				git_branch?: unknown;
				git_username?: unknown;
				git_token?: unknown;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	name_available_apps_create_name_available_post: {
		parameters: {
			query: {
				name: string;
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	setup_claim_port_apps_create_setup_claim_port_post: {
		parameters: {
			query: {
				token: string;
				host_port: number;
				container_port: number;
				tcp?: boolean;
				udp?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	delete_port_apps_create_delete_port_delete: {
		parameters: {
			query: {
				token: string;
				host_port: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	setup_service_apps_create_setup_service_get: {
		parameters: {
			query: {
				token: string;
				container_name: string;
				container_image: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_apps_apps__get: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['App'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_app_apps__app_name__get: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path: {
				app_name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AppOverview'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_volumes_apps__app_name__volumes_get: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path: {
				app_name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Volume'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	ping_ping_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
}
